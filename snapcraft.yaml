name: core20
# version: "20"
adopt-info: bootstrap
summary: Runtime environment based on Ubuntu 20.04
description: |
  The base snap based on the Ubuntu 20.04 release.
confinement: strict
type: base
build-base: core20

parts:
  consoleconf-deb:
    plugin: nil
    source: https://github.com/CanonicalLtd/subiquity.git
    source-type: git
    source-branch: core/focal
    override-pull: |
      snapcraftctl pull
      # install build dependencies
      export DEBIAN_FRONTEND=noninteractive
      export DEBCONF_NONINTERACTIVE_SEEN=true
      sudo -E apt-get build-dep -y ./
    override-build: |
      # unset the LD_FLAGS and LD_LIBRARY_PATH vars that snapcraft sets for us
      # as those will point to the $SNAPCRAFT_STAGE which on re-builds will
      # contain things like libc and friends that confuse the debian package
      # build system
      # TODO: should we unset $PATH to not include $SNAPCRAFT_STAGE too?
      unset LD_FLAGS
      unset LD_LIBRARY_PATH
      # run the real build (but just build the binary package, and don't
      # bother compressing it too much)
      dpkg-buildpackage -b -uc -us -Zgzip -zfast
      cp ../console-conf_*.deb ../subiquitycore_*.deb $SNAPCRAFT_PART_INSTALL
    stage:
      - -console-conf_*.deb
      - -subiquitycore_*.deb
    # XXX: Dirty hacks to enable building core20 on non-focal systems.
    # See below for details.
    override-prime: |
      unset LD_LIBRARY_PATH;
      export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
      # ensure snapcraftctl is found, see
      # https://github.com/snapcore/snapcraft/pull/2251
      export PATH="$PATH:/snap/snapcraft/current/bin/scriptlet-bin"
      snapcraftctl prime
  bootstrap:
    after:
      - consoleconf-deb
    plugin: make
    source: .
    build-packages:
      - shellcheck
      - wget
      - distro-info
    # XXX: Dirty hacks to enable building core20 on non-focal systems.
    # Without these overrides both the PATH and LD_LIBRARY_PATH contain paths
    # in the part's install directory which binaries can be incompatible with
    # the ones running on our system.  We don't need those while running stage
    # and prime anyway.
    override-pull: |
      unset LD_LIBRARY_PATH;
      snapcraftctl set-version "$(/bin/date +%Y%m%d)"
      snapcraftctl pull
    override-build: |
      snapcraftctl build
      # disable console-conf and cloud-init
      ln -sf /dev/null ${SNAPCRAFT_PART_INSTALL}/lib/systemd/system/cloud-config.service
      ln -sf /dev/null ${SNAPCRAFT_PART_INSTALL}/lib/systemd/system/cloud-final.service
      ln -sf /dev/null ${SNAPCRAFT_PART_INSTALL}/lib/systemd/system/cloud-init-local.service
      ln -sf /dev/null ${SNAPCRAFT_PART_INSTALL}/lib/systemd/system/cloud-init.service
      ln -sf /dev/null ${SNAPCRAFT_PART_INSTALL}/lib/systemd/system/console-conf@.service
    override-stage: |
      unset LD_LIBRARY_PATH;
      export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
      # ensure snapcraftctl is found, see
      # https://github.com/snapcore/snapcraft/pull/2251
      export PATH="$PATH:/snap/snapcraft/current/bin/scriptlet-bin"
      snapcraftctl stage
    override-prime: |
      unset LD_LIBRARY_PATH;
      export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
      # ensure snapcraftctl is found, see
      # https://github.com/snapcore/snapcraft/pull/2251
      export PATH="$PATH:/snap/snapcraft/current/bin/scriptlet-bin"
      snapcraftctl prime
      # ensure build-in tests are run
      # cd ${SNAPCRAFT_PART_SRC} && make test TESTDIR=${SNAPCRAFT_PRIME}
    prime:
      - -etc/rsyslog.d/21-cloudinit.conf
      - -etc/systemd/system/cloud-init.target.wants
      - -lib/systemd/system/cloud-final.service.wants
      - -lib/systemd/system/multi-user.target.wants/swapfile.service
      - -lib/systemd/system/swapfile.service
      - -lib/systemd/system-generators/cloud-init-generator
      - -lib/udev/hwdb.d
      - -usr/bin/cloud-init*
      - -usr/bin/console-conf
      - -usr/bin/pdb3*
      - -usr/bin/perl*
      - -usr/bin/py*
      - -usr/lib/cloud-init
      - -usr/lib/initramfs-tools
      - -usr/lib/*/perl
      - -usr/lib/*/perl-base
      - -usr/lib/*/python*
      - -usr/lib/python*
      - -usr/lib/valgrind
      - -usr/sbin/netplan
      - -usr/share/applications/python*
      - -usr/share/apport/package-hooks/cloud-init.py
      - -usr/share/bash-completion/completions/cloud-init
      - -usr/share/bash-completion/completions/micropython
      - -usr/share/bash-completion/completions/perl*
      - -usr/share/bash-completion/completions/py*
      - -usr/share/bash-completion/helpers/perl*
      - -usr/share/bash-completion/helpers/python*
      - -usr/share/binfmts/python*
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/gcc-*
      - -usr/share/initramfs-tools
      - -usr/share/keyrings/ubuntu-cloudimage*
      - -usr/share/lintian
      - -usr/share/man
      - -usr/share/perl*
      - -usr/share/pixmaps/python*
      - -usr/share/python*
      - -usr/share/subiquity
      - -var/lib/python*
      - -var/lib/systemd/deb-systemd-helper-enabled/cloud-*
